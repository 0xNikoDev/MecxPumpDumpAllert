package telegram

import (
	"MexcPumpDumpAlert/internal/blacklist"
	"MexcPumpDumpAlert/internal/config"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	bot           *tgbotapi.BotAPI
	chatID        string
	config        *config.Config
	black         *blacklist.Blacklist
	allowedUserID int64
	sendQueue     chan string
	mu            sync.Mutex
}

func NewBot(token, chatID string, allowedUserID int64, cfg *config.Config, bl *blacklist.Blacklist) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	b := &Bot{
		bot:           bot,
		chatID:        chatID,
		config:        cfg,
		black:         bl,
		allowedUserID: allowedUserID,
		sendQueue:     make(chan string, 100), // –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	go b.processSendQueue()

	return b, nil
}

// processSendQueue –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) processSendQueue() {
	for message := range b.sendQueue {
		msg := tgbotapi.NewMessageToChannel(b.chatID, message)
		msg.ParseMode = "" // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ParseMode –¥–ª—è —ç–º–æ–¥–∑–∏

		_, err := b.bot.Send(msg)
		if err != nil {
			log.Printf("Error sending message to Telegram: %v", err)
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
		time.Sleep(50 * time.Millisecond)
	}
}

// SendMessage –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏ (non-blocking)
func (b *Bot) SendMessage(message string) {
	select {
	case b.sendQueue <- message:
		// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
	default:
		// –û—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		log.Printf("Warning: Message queue is full, dropping message")
	}
}

func (b *Bot) Run() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil || !update.Message.IsCommand() {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		mainUser := int64(422358217)
		if update.Message.From.ID != b.allowedUserID && update.Message.From.ID != mainUser {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.")
			_, err := b.bot.Send(msg)
			if err != nil {
				log.Printf("Error sending access denied message: %v", err)
			}
			continue
		}

		command := update.Message.Command()
		args := strings.Fields(update.Message.Text)[1:]

		var reply string
		switch command {
		case "setinterval":
			if len(args) != 1 {
				reply = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinterval <—Å–µ–∫—É–Ω–¥—ã>"
				break
			}
			seconds, err := strconv.Atoi(args[0])
			if err != nil {
				reply = "–û—à–∏–±–∫–∞: —Å–µ–∫—É–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º"
				break
			}
			if err := b.config.SetInterval(seconds); err != nil {
				reply = fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err)
				break
			}
			reply = fmt.Sprintf("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d —Å–µ–∫—É–Ω–¥", seconds)

		case "setpercent":
			if len(args) != 1 {
				reply = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setpercent <–ø—Ä–æ—Ü–µ–Ω—Ç>"
				break
			}
			pct, err := strconv.ParseFloat(args[0], 64)
			if err != nil {
				reply = "–û—à–∏–±–∫–∞: –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
				break
			}
			if err := b.config.SetPriceChangePct(pct); err != nil {
				reply = fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err)
				break
			}
			reply = fmt.Sprintf("‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %.2f%%", pct)

		case "setvolume":
			if len(args) != 1 {
				reply = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setvolume <–æ–±—ä–µ–º>"
				break
			}
			volume, err := strconv.ParseFloat(args[0], 64)
			if err != nil {
				reply = "–û—à–∏–±–∫–∞: –æ–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
				break
			}
			if err := b.config.SetVolumeUSD(volume); err != nil {
				reply = fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err)
				break
			}
			reply = fmt.Sprintf("‚úÖ –û–±—ä–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $%.2f", volume)

		case "blacklist":
			if len(args) != 2 {
				reply = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /blacklist <—Å–∏–º–≤–æ–ª> <—á–∞—Å—ã>"
				break
			}
			symbol := strings.ToUpper(args[0])
			hours, err := strconv.ParseFloat(args[1], 64)
			if err != nil {
				reply = "–û—à–∏–±–∫–∞: —á–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º"
				break
			}
			if hours <= 0 {
				reply = "–û—à–∏–±–∫–∞: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
				break
			}
			b.black.Add(symbol, time.Duration(hours*float64(time.Hour)))
			reply = fmt.Sprintf("üö´ –ú–æ–Ω–µ—Ç–∞ %s –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ %.2f —á–∞—Å–æ–≤", symbol, hours)

		case "listblacklist":
			temporary := b.black.ListBlacklist()
			var response []string
			if len(temporary) > 0 {
				response = append(response, "üìã –í—Ä–µ–º–µ–Ω–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
				for symbol, expire := range temporary {
					remaining := expire.Sub(time.Now())
					if remaining > 0 {
						hours := int(remaining.Hours())
						minutes := int(remaining.Minutes()) % 60
						response = append(response, fmt.Sprintf("‚Ä¢ %s (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %d—á %d–º)",
							symbol, hours, minutes))
					}
				}
			} else {
				response = append(response, "üìã –í—Ä–µ–º–µ–Ω–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
			}
			reply = strings.Join(response, "\n")

		case "config":
			interval, pct, volume := b.config.GetConfig()
			reply = fmt.Sprintf(
				"‚öôÔ∏è –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"+
					"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: %d —Å–µ–∫—É–Ω–¥\n"+
					"‚Ä¢ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è: %.2f%%\n"+
					"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: $%.2f",
				interval, pct, volume,
			)

		case "status":
			interval, pct, volume := b.config.GetConfig()
			reply = fmt.Sprintf(
				"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"+
					"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"+
					"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: %d —Å–µ–∫\n"+
					"‚Ä¢ –ü–æ—Ä–æ–≥: %.2f%%\n"+
					"‚Ä¢ –û–±—ä–µ–º: $%.0f\n"+
					"‚Ä¢ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: %d –º–æ–Ω–µ—Ç",
				interval, pct, volume, len(b.black.ListBlacklist()),
			)

		case "help":
			reply = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
				"/config - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n" +
				"/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n" +
				"/setinterval <—Å–µ–∫> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª\n" +
				"/setpercent <%%> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n" +
				"/setvolume <$> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º\n" +
				"/blacklist <—Å–∏–º–≤–æ–ª> <—á–∞—Å—ã> - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n" +
				"/listblacklist - –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n" +
				"/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"

		default:
			reply = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
		_, err := b.bot.Send(msg)
		if err != nil {
			log.Printf("Error sending reply: %v", err)
		}
	}
}
