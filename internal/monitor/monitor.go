package monitor

import (
	"MexcPumpDumpAlert/internal/api"
	"MexcPumpDumpAlert/internal/blacklist"
	"MexcPumpDumpAlert/internal/config"
	"MexcPumpDumpAlert/internal/telegram"
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"time"
)

// PricePoint —Ö—Ä–∞–Ω–∏—Ç —Ü–µ–Ω—É –∏ –≤—Ä–µ–º—è
type PricePoint struct {
	Price     float64
	Timestamp time.Time
}

// PriceHistory —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
type PriceHistory struct {
	Symbol string
	Points []PricePoint
}

// calculateRequestInterval –≤—ã—á–∏—Å–ª—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
func calculateRequestInterval(compareIntervalSeconds int) int {
	// –§–æ—Ä–º—É–ª–∞: max(1, min(3, –∏–Ω—Ç–µ—Ä–≤–∞–ª_—Å—Ä–∞–≤–Ω–µ–Ω–∏—è / 20))
	requestInterval := compareIntervalSeconds / 20
	if requestInterval < 1 {
		requestInterval = 1
	}
	if requestInterval > 3 {
		requestInterval = 3
	}
	return requestInterval
}

// getEyeEmoji returns an eye emoji based on volume
func getEyeEmoji(volume float64) string {
	if volume >= 1000 && volume < 5000 {
		return "üëÅÔ∏è"
	}
	return ""
}

// getFireEmojis returns fire emojis based on volume
func getFireEmojis(volume float64) string {
	if volume < 5000 {
		return ""
	}
	fires := 1 // 5k‚Äì9k
	if volume >= 10000 {
		fires = 2 // 10k‚Äì19k
	}
	if volume >= 20000 {
		fires = 3 // 20k‚Äì29k
	}
	if volume >= 30000 {
		fires = int(math.Min(3+math.Floor((volume-30000)/10000), 10)) // +1 per 10k, max 10
	}
	return strings.Repeat("üî•", fires)
}

// getCircleEmojis returns circle emojis based on price change percentage
func getCircleEmojis(priceChangePct float64) string {
	absPct := math.Abs(priceChangePct)
	circles := int(math.Min(math.Ceil(absPct/10), 10)) // 1 circle per 10%, max 10
	return strings.Repeat("üîµ", circles)
}

// calculateVolumeFromTrades —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–æ–Ω –∏–ª–∏ –æ–±—â–∏–π –æ–±—ä–µ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
func calculateVolumeFromTrades(client *api.MEXCClient, symbol string, intervalSeconds int) (float64, error) {
	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ trades (–º–∞–∫—Å–∏–º—É–º 1000)
	trades, err := client.GetTrades(symbol, 1000)
	if err != nil {
		return 0, fmt.Errorf("failed to get trades: %v", err)
	}

	if len(trades) == 0 {
		return 0, fmt.Errorf("no trades data")
	}

	currentTimeMs := time.Now().UnixNano() / int64(time.Millisecond)

	// –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É - –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–≤–∞–ª + –±—É—Ñ–µ—Ä
	if intervalSeconds > 120 {
		return calculateTotalVolumeForLargeInterval(trades, currentTimeMs, intervalSeconds)
	}

	// –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ <= 2 –º–∏–Ω—É—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
	return calculateMaxVolumeFromSlidingWindows(trades, currentTimeMs, intervalSeconds)
}

// calculateTotalVolumeForLargeInterval —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –æ–±—ä–µ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
func calculateTotalVolumeForLargeInterval(trades []api.Trade, currentTimeMs int64, intervalSeconds int) (float64, error) {
	// –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
	bufferMs := int64(10 * 1000)
	intervalMs := int64(intervalSeconds) * 1000
	startTimeMs := currentTimeMs - intervalMs - bufferMs

	var totalVolumeUSD float64

	for _, trade := range trades {
		if trade.Time >= startTimeMs && trade.Time <= currentTimeMs {
			quoteQty, err := strconv.ParseFloat(trade.QuoteQty, 64)
			if err == nil && quoteQty > 0 {
				totalVolumeUSD += quoteQty
			}
		}
	}

	return totalVolumeUSD, nil
}

// calculateMaxVolumeFromSlidingWindows –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å—Ä–µ–¥–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–æ–Ω –∑–∞ 2 –º–∏–Ω—É—Ç—ã
func calculateMaxVolumeFromSlidingWindows(trades []api.Trade, currentTimeMs int64, intervalSeconds int) (float64, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
	twoMinutesMs := int64(120 * 1000)
	startTimeMs := currentTimeMs - twoMinutesMs

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –ø–æ —Å–µ–∫—É–Ω–¥–∞–º
	secondVolumes := make(map[int64]float64)

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–π–¥—ã –ø–æ —Å–µ–∫—É–Ω–¥–∞–º
	for _, trade := range trades {
		if trade.Time >= startTimeMs && trade.Time <= currentTimeMs {
			quoteQty, err := strconv.ParseFloat(trade.QuoteQty, 64)
			if err == nil && quoteQty > 0 {
				// –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–µ–∫—É–Ω–¥
				secondTimestamp := trade.Time / 1000
				secondVolumes[secondTimestamp] += quoteQty
			}
		}
	}

	// –°–æ–∑–¥–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
	intervalSizeSeconds := int64(intervalSeconds)
	maxVolume := float64(0)

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –º–∏–Ω—É—Ç
	for i := int64(0); i <= 120-intervalSizeSeconds; i++ {
		windowStartSecond := (currentTimeMs / 1000) - 120 + i
		windowEndSecond := windowStartSecond + intervalSizeSeconds

		windowVolume := float64(0)

		// –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
		for second := windowStartSecond; second < windowEndSecond; second++ {
			if volume, exists := secondVolumes[second]; exists {
				windowVolume += volume
			}
			// –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–µ, –æ–±—ä–µ–º –æ—Å—Ç–∞–µ—Ç—Å—è 0 (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ)
		}

		if windowVolume > maxVolume {
			maxVolume = windowVolume
		}
	}

	return maxVolume, nil
}

// calculateVolumeUSD —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–æ–Ω –∏–ª–∏ –æ–±—â–∏–π –æ–±—ä–µ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
func calculateVolumeUSD(client *api.MEXCClient, ticker api.Ticker, currentPrice float64, intervalSeconds int) float64 {
	// –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º –∏–∑ trades
	for attempt := 1; attempt <= 3; attempt++ {
		volume, err := calculateVolumeFromTrades(client, ticker.Symbol, intervalSeconds)
		if err == nil {
			return volume
		}

		// –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ª–æ–≥–∏
		if attempt < 3 {
			time.Sleep(100 * time.Millisecond)
		}
	}

	// –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 (–±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É)
	return 0
}

// addPricePoint –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É —Ü–µ–Ω—ã –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ
func (ph *PriceHistory) addPricePoint(price float64, timestamp time.Time, keepDuration time.Duration) {
	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
	ph.Points = append(ph.Points, PricePoint{
		Price:     price,
		Timestamp: timestamp,
	})

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ keepDuration + –±—É—Ñ–µ—Ä)
	cutoffTime := timestamp.Add(-keepDuration - 10*time.Second)
	var newPoints []PricePoint
	for _, point := range ph.Points {
		if point.Timestamp.After(cutoffTime) {
			newPoints = append(newPoints, point)
		}
	}
	ph.Points = newPoints
}

// findPriceExtremes –Ω–∞—Ö–æ–¥–∏—Ç –º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
func (ph *PriceHistory) findPriceExtremes(fromTime, toTime time.Time) (minPrice, maxPrice float64, found bool) {
	var prices []float64

	for _, point := range ph.Points {
		if point.Timestamp.After(fromTime) && point.Timestamp.Before(toTime) {
			prices = append(prices, point.Price)
		}
	}

	if len(prices) == 0 {
		return 0, 0, false
	}

	minPrice = prices[0]
	maxPrice = prices[0]

	for _, price := range prices {
		if price < minPrice {
			minPrice = price
		}
		if price > maxPrice {
			maxPrice = price
		}
	}

	return minPrice, maxPrice, true
}

func Run(client *api.MEXCClient, cfg *config.Config, bl *blacklist.Blacklist, bot *telegram.Bot) {
	// –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
	priceHistories := make(map[string]*PriceHistory)

	for {
		startTime := time.Now()

		// –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
		requestIntervalSeconds := calculateRequestInterval(cfg.IntervalSeconds)
		log.Printf("üîÑ Starting cycle (compare interval: %ds, request interval: %ds)",
			cfg.IntervalSeconds, requestIntervalSeconds)

		tickers, err := client.GetTickers()
		if err != nil {
			log.Printf("‚ùå Error fetching tickers: %v", err)
			time.Sleep(5 * time.Second)
			continue
		}
		log.Printf("üìä Fetched %d tickers", len(tickers))

		processedCount := 0
		alertCount := 0
		intervalDuration := time.Duration(cfg.IntervalSeconds) * time.Second

		for _, ticker := range tickers {
			if bl.IsBlacklisted(ticker.Symbol) {
				continue
			}

			currentPrice, err := strconv.ParseFloat(ticker.Price, 64)
			if err != nil || currentPrice <= 0 {
				continue
			}

			processedCount++
			currentTime := time.Now()

			// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
			history, exists := priceHistories[ticker.Symbol]
			if !exists {
				history = &PriceHistory{Symbol: ticker.Symbol}
				priceHistories[ticker.Symbol] = history
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
			history.addPricePoint(currentPrice, currentTime, intervalDuration)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
			if len(history.Points) < 2 {
				continue
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
			// –ò—â–µ–º —Ü–µ–Ω—ã –æ—Ç (intervalSeconds - –±—É—Ñ–µ—Ä) –¥–æ (intervalSeconds + –±—É—Ñ–µ—Ä) —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
			bufferSeconds := int(math.Max(3, float64(cfg.IntervalSeconds)*0.1)) // 10% –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –º–∏–Ω–∏–º—É–º 3 —Å–µ–∫
			compareFromTime := currentTime.Add(-intervalDuration - time.Duration(bufferSeconds)*time.Second)
			compareToTime := currentTime.Add(-intervalDuration + time.Duration(bufferSeconds)*time.Second)

			// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
			minPrice, maxPrice, found := history.findPriceExtremes(compareFromTime, compareToTime)
			if !found {
				continue
			}

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞–º–ø–∞ (–æ—Ç –º–∏–Ω–∏–º—É–º–∞) –∏ –¥–∞–º–ø–∞ (–æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
			pumpChangePct := ((currentPrice - minPrice) / minPrice) * 100 // –†–æ—Å—Ç –æ—Ç –º–∏–Ω–∏–º—É–º–∞
			dumpChangePct := ((currentPrice - maxPrice) / maxPrice) * 100 // –ü–∞–¥–µ–Ω–∏–µ –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ
			var significantChangePct float64
			var changeType string
			var referencePrice float64

			if math.Abs(pumpChangePct) > math.Abs(dumpChangePct) {
				significantChangePct = pumpChangePct
				changeType = "PUMP"
				referencePrice = minPrice
			} else {
				significantChangePct = dumpChangePct
				changeType = "DUMP"
				referencePrice = maxPrice
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			if math.Abs(significantChangePct) >= cfg.PriceChangePct {
				log.Printf("üéØ POTENTIAL %s: %s %.8f->%.8f (%.2f%%)",
					changeType, ticker.Symbol, referencePrice, currentPrice, significantChangePct)

				// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º –∏–∑ trades
				volumeUSD := calculateVolumeUSD(client, ticker, currentPrice, cfg.IntervalSeconds)

				if volumeUSD > 0 {
					if cfg.IntervalSeconds <= 120 {
						log.Printf("üìä Max sliding window volume for %s: $%.2f (required: $%.2f, interval: %ds)",
							ticker.Symbol, volumeUSD, cfg.VolumeUSD, cfg.IntervalSeconds)
					} else {
						log.Printf("üìä Total interval volume for %s: $%.2f (required: $%.2f, interval: %ds)",
							ticker.Symbol, volumeUSD, cfg.VolumeUSD, cfg.IntervalSeconds)
					}
				} else {
					log.Printf("üìä No volume data for %s (trades API failed)", ticker.Symbol)
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
				if volumeUSD >= cfg.VolumeUSD {
					directionEmoji := "üü¢"
					if significantChangePct < 0 {
						directionEmoji = "üî¥"
					}

					circleEmojis := getCircleEmojis(significantChangePct)
					eyeEmoji := getEyeEmoji(volumeUSD)
					fireEmojis := getFireEmojis(volumeUSD)

					msg := fmt.Sprintf(
						"%s %s\n%.2f%% %s\n$%.0f %s%s",
						strings.ToUpper(ticker.Symbol), directionEmoji,
						math.Abs(significantChangePct), circleEmojis,
						volumeUSD, eyeEmoji, fireEmojis,
					)

					log.Printf("üö® ALERT SENT: %s", msg)
					bot.SendMessage(msg)
					bl.Add(ticker.Symbol, 10*time.Minute)
					alertCount++
				} else {
					log.Printf("üí∞ Volume too low: %s $%.2f < $%.2f",
						ticker.Symbol, volumeUSD, cfg.VolumeUSD)
				}
			}
		}

		// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
		cleanedCount := 0
		cleanupThreshold := time.Now().Add(-2 * intervalDuration)
		for symbol, history := range priceHistories {
			if len(history.Points) == 0 || history.Points[len(history.Points)-1].Timestamp.Before(cleanupThreshold) {
				delete(priceHistories, symbol)
				cleanedCount++
			}
		}

		elapsed := time.Since(startTime)

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∞–ª–µ—Ä—Ç—ã –∏–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ
		if alertCount > 0 {
			log.Printf("üö® CYCLE SUMMARY: %d ALERTS sent from %d processed tickers in %v",
				alertCount, processedCount, elapsed)
		} else if processedCount > 0 && processedCount%100 == 0 {
			// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
			log.Printf("‚úÖ System active: processed %d tickers, no alerts in %v",
				processedCount, elapsed)
		}

		// –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
		requestInterval := time.Duration(requestIntervalSeconds) * time.Second
		if elapsed < requestInterval {
			time.Sleep(requestInterval - elapsed)
		} else {
			log.Printf("‚ö†Ô∏è Warning: Cycle took longer than request interval (%v > %v)", elapsed, requestInterval)
		}
	}
}
