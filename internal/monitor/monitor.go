package monitor

import (
	"MexcPumpDumpAlert/internal/api"
	"MexcPumpDumpAlert/internal/blacklist"
	"MexcPumpDumpAlert/internal/config"
	"MexcPumpDumpAlert/internal/telegram"
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
	"time"
)

// PricePoint —Ö—Ä–∞–Ω–∏—Ç —Ü–µ–Ω—É –∏ –≤—Ä–µ–º—è
type PricePoint struct {
	Price     float64
	Timestamp time.Time
}

// PriceHistory —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
type PriceHistory struct {
	Symbol string
	Points []PricePoint
	mu     sync.RWMutex
}

// VolumeCache –∫—ç—à –¥–ª—è –æ–±—ä–µ–º–æ–≤
type VolumeCache struct {
	data map[string]*VolumeEntry
	mu   sync.RWMutex
}

type VolumeEntry struct {
	Volume    float64
	Timestamp time.Time
}

func NewVolumeCache() *VolumeCache {
	return &VolumeCache{
		data: make(map[string]*VolumeEntry),
	}
}

func (vc *VolumeCache) Get(symbol string, maxAge time.Duration) (float64, bool) {
	vc.mu.RLock()
	defer vc.mu.RUnlock()

	entry, exists := vc.data[symbol]
	if !exists {
		return 0, false
	}

	if time.Since(entry.Timestamp) > maxAge {
		return 0, false
	}

	return entry.Volume, true
}

func (vc *VolumeCache) Set(symbol string, volume float64) {
	vc.mu.Lock()
	defer vc.mu.Unlock()

	vc.data[symbol] = &VolumeEntry{
		Volume:    volume,
		Timestamp: time.Now(),
	}
}

// calculateRequestInterval –≤—ã—á–∏—Å–ª—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
func calculateRequestInterval(compareIntervalSeconds int) time.Duration {
	// –î–ª—è 5-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
	if compareIntervalSeconds <= 5 {
		return 250 * time.Millisecond // 4 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É!
	} else if compareIntervalSeconds <= 10 {
		return 500 * time.Millisecond // 2 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É
	} else if compareIntervalSeconds <= 30 {
		return 1 * time.Second
	}
	return 2 * time.Second
}

// getEyeEmoji returns an eye emoji based on volume
func getEyeEmoji(volume float64) string {
	if volume >= 1000 && volume < 5000 {
		return "üëÅÔ∏è"
	}
	return ""
}

// getFireEmojis returns fire emojis based on volume
func getFireEmojis(volume float64) string {
	if volume < 5000 {
		return ""
	}
	fires := 1 // 5k‚Äì9k
	if volume >= 10000 {
		fires = 2 // 10k‚Äì19k
	}
	if volume >= 20000 {
		fires = 3 // 20k‚Äì29k
	}
	if volume >= 30000 {
		fires = int(math.Min(3+math.Floor((volume-30000)/10000), 10)) // +1 per 10k, max 10
	}
	return strings.Repeat("üî•", fires)
}

// getCircleEmojis returns circle emojis based on price change percentage
func getCircleEmojis(priceChangePct float64) string {
	absPct := math.Abs(priceChangePct)
	circles := int(math.Min(math.Ceil(absPct/10), 10)) // 1 circle per 10%, max 10
	return strings.Repeat("üîµ", circles)
}

// calculateVolumeFromTradesFast –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
func calculateVolumeFromTradesFast(client *api.MEXCClient, symbol string, intervalSeconds int) (float64, error) {
	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º trades —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	trades, err := client.GetTrades(symbol, 1000)
	if err != nil {
		return 0, err
	}

	if len(trades) == 0 {
		return 0, fmt.Errorf("no trades")
	}

	currentTimeMs := time.Now().UnixNano() / int64(time.Millisecond)

	// –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
	if intervalSeconds <= 10 {
		// –ü—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º –æ–±—ä–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–µ–∫—É–Ω–¥
		intervalMs := int64(intervalSeconds) * 1000
		startTimeMs := currentTimeMs - intervalMs

		var totalVolumeUSD float64
		for _, trade := range trades {
			if trade.Time >= startTimeMs && trade.Time <= currentTimeMs {
				quoteQty, err := strconv.ParseFloat(trade.QuoteQty, 64)
				if err == nil && quoteQty > 0 {
					totalVolumeUSD += quoteQty
				}
			}
		}
		return totalVolumeUSD, nil
	}

	// –î–ª—è –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞
	return calculateMaxVolumeFromSlidingWindows(trades, currentTimeMs, intervalSeconds)
}

// calculateMaxVolumeFromSlidingWindows –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å—Ä–µ–¥–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–æ–Ω
func calculateMaxVolumeFromSlidingWindows(trades []api.Trade, currentTimeMs int64, intervalSeconds int) (float64, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
	twoMinutesMs := int64(120 * 1000)
	startTimeMs := currentTimeMs - twoMinutesMs

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –ø–æ —Å–µ–∫—É–Ω–¥–∞–º
	secondVolumes := make(map[int64]float64)

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–π–¥—ã –ø–æ —Å–µ–∫—É–Ω–¥–∞–º
	for _, trade := range trades {
		if trade.Time >= startTimeMs && trade.Time <= currentTimeMs {
			quoteQty, err := strconv.ParseFloat(trade.QuoteQty, 64)
			if err == nil && quoteQty > 0 {
				secondTimestamp := trade.Time / 1000
				secondVolumes[secondTimestamp] += quoteQty
			}
		}
	}

	intervalSizeSeconds := int64(intervalSeconds)
	maxVolume := float64(0)

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –º–∏–Ω—É—Ç
	for i := int64(0); i <= 120-intervalSizeSeconds; i++ {
		windowStartSecond := (currentTimeMs / 1000) - 120 + i
		windowEndSecond := windowStartSecond + intervalSizeSeconds

		windowVolume := float64(0)
		for second := windowStartSecond; second < windowEndSecond; second++ {
			if volume, exists := secondVolumes[second]; exists {
				windowVolume += volume
			}
		}

		if windowVolume > maxVolume {
			maxVolume = windowVolume
		}
	}

	return maxVolume, nil
}

// addPricePoint –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É —Ü–µ–Ω—ã –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ (thread-safe)
func (ph *PriceHistory) addPricePoint(price float64, timestamp time.Time, keepDuration time.Duration) {
	ph.mu.Lock()
	defer ph.mu.Unlock()

	ph.Points = append(ph.Points, PricePoint{
		Price:     price,
		Timestamp: timestamp,
	})

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏
	cutoffTime := timestamp.Add(-keepDuration - 10*time.Second)
	var newPoints []PricePoint
	for _, point := range ph.Points {
		if point.Timestamp.After(cutoffTime) {
			newPoints = append(newPoints, point)
		}
	}
	ph.Points = newPoints
}

// findPriceExtremes –Ω–∞—Ö–æ–¥–∏—Ç –º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (thread-safe)
func (ph *PriceHistory) findPriceExtremes(fromTime, toTime time.Time) (minPrice, maxPrice float64, found bool) {
	ph.mu.RLock()
	defer ph.mu.RUnlock()

	var prices []float64
	for _, point := range ph.Points {
		if point.Timestamp.After(fromTime) && point.Timestamp.Before(toTime) {
			prices = append(prices, point.Price)
		}
	}

	if len(prices) == 0 {
		return 0, 0, false
	}

	minPrice = prices[0]
	maxPrice = prices[0]
	for _, price := range prices {
		if price < minPrice {
			minPrice = price
		}
		if price > maxPrice {
			maxPrice = price
		}
	}

	return minPrice, maxPrice, true
}

// getPointsCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ (thread-safe)
func (ph *PriceHistory) getPointsCount() int {
	ph.mu.RLock()
	defer ph.mu.RUnlock()
	return len(ph.Points)
}

// processTicker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä –ë–´–°–¢–†–û
func processTicker(
	ticker api.Ticker,
	cfg *config.Config,
	bl *blacklist.Blacklist,
	bot *telegram.Bot,
	client *api.MEXCClient,
	priceHistories map[string]*PriceHistory,
	historyMutex *sync.RWMutex,
	volumeCache *VolumeCache,
	processedCount *int32,
	alertCount *int32,
	intervalDuration time.Duration,
	volumeWg *sync.WaitGroup,
	volumeSemaphore chan struct{},
) {
	currentPrice, err := strconv.ParseFloat(ticker.Price, 64)
	if err != nil || currentPrice <= 0 {
		return
	}

	atomic.AddInt32(processedCount, 1)
	currentTime := time.Now()

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
	historyMutex.RLock()
	history, exists := priceHistories[ticker.Symbol]
	historyMutex.RUnlock()

	if !exists {
		history = &PriceHistory{Symbol: ticker.Symbol}
		historyMutex.Lock()
		priceHistories[ticker.Symbol] = history
		historyMutex.Unlock()
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
	history.addPricePoint(currentPrice, currentTime, intervalDuration)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	if history.getPointsCount() < 2 {
		return
	}

	// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è 5-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
	bufferSeconds := 1
	if cfg.IntervalSeconds > 10 {
		bufferSeconds = 2
	}

	compareFromTime := currentTime.Add(-intervalDuration - time.Duration(bufferSeconds)*time.Second)
	compareToTime := currentTime.Add(-intervalDuration + time.Duration(bufferSeconds)*time.Second)

	// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã
	minPrice, maxPrice, found := history.findPriceExtremes(compareFromTime, compareToTime)
	if !found {
		return
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	pumpChangePct := ((currentPrice - minPrice) / minPrice) * 100
	dumpChangePct := ((currentPrice - maxPrice) / maxPrice) * 100

	var significantChangePct float64
	var changeType string
	var referencePrice float64

	if math.Abs(pumpChangePct) > math.Abs(dumpChangePct) {
		significantChangePct = pumpChangePct
		changeType = "PUMP"
		referencePrice = minPrice
	} else {
		significantChangePct = dumpChangePct
		changeType = "DUMP"
		referencePrice = maxPrice
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
	if math.Abs(significantChangePct) >= cfg.PriceChangePct {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –æ–±—ä–µ–º–∞
		cachedVolume, hasCache := volumeCache.Get(ticker.Symbol, 2*time.Second)

		if hasCache && cachedVolume >= cfg.VolumeUSD {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç!
			sendAlert(ticker, significantChangePct, cachedVolume, referencePrice, currentPrice, changeType, bot, bl, alertCount)
		} else {
			// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä–µ–º–∞
			volumeWg.Add(1)
			go func() {
				defer volumeWg.Done()

				// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–µ–º–∞—Ñ–æ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
				select {
				case volumeSemaphore <- struct{}{}:
					defer func() { <-volumeSemaphore }()

					volume, err := calculateVolumeFromTradesFast(client, ticker.Symbol, cfg.IntervalSeconds)
					if err == nil {
						volumeCache.Set(ticker.Symbol, volume)

						if volume >= cfg.VolumeUSD {
							sendAlert(ticker, significantChangePct, volume, referencePrice, currentPrice, changeType, bot, bl, alertCount)
						}
					}
				case <-time.After(100 * time.Millisecond):
					// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–µ–º–∞—Ñ–æ—Ä –∑–∞–Ω—è—Ç
				}
			}()
		}
	}
}

// sendAlert –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç
func sendAlert(ticker api.Ticker, changePct, volume, refPrice, curPrice float64, changeType string, bot *telegram.Bot, bl *blacklist.Blacklist, alertCount *int32) {
	directionEmoji := "üü¢"
	if changePct < 0 {
		directionEmoji = "üî¥"
	}

	circleEmojis := getCircleEmojis(changePct)
	eyeEmoji := getEyeEmoji(volume)
	fireEmojis := getFireEmojis(volume)

	msg := fmt.Sprintf(
		"%s %s\n%.2f%% %s\n$%.0f %s%s",
		strings.ToUpper(ticker.Symbol), directionEmoji,
		math.Abs(changePct), circleEmojis,
		volume, eyeEmoji, fireEmojis,
	)

	log.Printf("üö® %s: %s %.8f->%.8f (%.2f%%), Vol: $%.0f",
		changeType, ticker.Symbol, refPrice, curPrice, changePct, volume)

	bot.SendMessage(msg)
	bl.Add(ticker.Symbol, 10*time.Minute)
	atomic.AddInt32(alertCount, 1)
}

func Run(client *api.MEXCClient, cfg *config.Config, bl *blacklist.Blacklist, bot *telegram.Bot) {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	priceHistories := make(map[string]*PriceHistory)
	historyMutex := &sync.RWMutex{}
	volumeCache := NewVolumeCache()

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è volume
	volumeSemaphore := make(chan struct{}, 20)

	// –°—á–µ—Ç—á–∏–∫–∏
	var totalCycles int64
	var lastLogTime time.Time

	log.Printf("üöÄ Monitor started (interval: %ds, threshold: %.2f%%, volume: $%.0f)",
		cfg.IntervalSeconds, cfg.PriceChangePct, cfg.VolumeUSD)

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
	for {
		cycleStart := time.Now()
		atomic.AddInt64(&totalCycles, 1)

		// –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		requestInterval := calculateRequestInterval(cfg.IntervalSeconds)

		// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã
		tickers, err := client.GetTickers()
		if err != nil {
			log.Printf("‚ùå Error fetching tickers: %v", err)
			time.Sleep(500 * time.Millisecond)
			continue
		}

		var processedCount int32
		var alertCount int32
		intervalDuration := time.Duration(cfg.IntervalSeconds) * time.Second

		// WaitGroup –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ–±—ä–µ–º–∞
		var volumeWg sync.WaitGroup

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –∏ –ë–´–°–¢–†–û
		var wg sync.WaitGroup
		semaphore := make(chan struct{}, 50) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º

		for _, ticker := range tickers {
			if bl.IsBlacklisted(ticker.Symbol) {
				continue
			}

			wg.Add(1)
			go func(t api.Ticker) {
				defer wg.Done()

				semaphore <- struct{}{}
				defer func() { <-semaphore }()

				processTicker(
					t, cfg, bl, bot, client,
					priceHistories, historyMutex,
					volumeCache,
					&processedCount, &alertCount,
					intervalDuration,
					&volumeWg, volumeSemaphore,
				)
			}(ticker)
		}

		// –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
		wg.Wait()

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ–±—ä–µ–º–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
		volumeDone := make(chan bool)
		go func() {
			volumeWg.Wait()
			volumeDone <- true
		}()

		select {
		case <-volumeDone:
			// –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
		case <-time.After(requestInterval - 50*time.Millisecond):
			// –¢–∞–π–º–∞—É—Ç - –∏–¥–µ–º –¥–∞–ª—å—à–µ
		}

		// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π (–∫–∞–∂–¥—ã–µ 30 —Ü–∏–∫–ª–æ–≤)
		if atomic.LoadInt64(&totalCycles)%30 == 0 {
			go func() {
				historyMutex.Lock()
				defer historyMutex.Unlock()

				cleanupThreshold := time.Now().Add(-2 * intervalDuration)
				for symbol, history := range priceHistories {
					if history.getPointsCount() == 0 {
						delete(priceHistories, symbol)
						continue
					}
					history.mu.RLock()
					needDelete := len(history.Points) > 0 && history.Points[len(history.Points)-1].Timestamp.Before(cleanupThreshold)
					history.mu.RUnlock()
					if needDelete {
						delete(priceHistories, symbol)
					}
				}
			}()
		}

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		elapsed := time.Since(cycleStart)
		currentAlertCount := atomic.LoadInt32(&alertCount)
		currentProcessedCount := atomic.LoadInt32(&processedCount)

		if currentAlertCount > 0 {
			log.Printf("üö® Cycle #%d: %d alerts, %d tickers, %.3fs",
				totalCycles, currentAlertCount, currentProcessedCount, elapsed.Seconds())
			lastLogTime = time.Now()
		} else if time.Since(lastLogTime) > 30*time.Second {
			log.Printf("‚úÖ Cycle #%d: %d tickers, %.3fs",
				totalCycles, currentProcessedCount, elapsed.Seconds())
			lastLogTime = time.Now()
		}

		// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
		if elapsed < requestInterval {
			time.Sleep(requestInterval - elapsed)
		}
	}
}
