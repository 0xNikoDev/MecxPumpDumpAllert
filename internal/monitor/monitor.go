package monitor

import (
	"MexcPumpDumpAlert/internal/api"
	"MexcPumpDumpAlert/internal/blacklist"
	"MexcPumpDumpAlert/internal/config"
	"MexcPumpDumpAlert/internal/telegram"
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"time"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
const API_REQUEST_INTERVAL = 3

// PricePoint —Ö—Ä–∞–Ω–∏—Ç —Ü–µ–Ω—É –∏ –≤—Ä–µ–º—è
type PricePoint struct {
	Price     float64
	Timestamp time.Time
}

// PriceHistory —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
type PriceHistory struct {
	Symbol string
	Points []PricePoint
}

// getEyeEmoji returns an eye emoji based on volume
func getEyeEmoji(volume float64) string {
	if volume >= 1000 && volume < 5000 {
		return "üëÅÔ∏è"
	}
	return ""
}

// getFireEmojis returns fire emojis based on volume
func getFireEmojis(volume float64) string {
	if volume < 5000 {
		return ""
	}
	fires := 1 // 5k‚Äì9k
	if volume >= 10000 {
		fires = 2 // 10k‚Äì19k
	}
	if volume >= 20000 {
		fires = 3 // 20k‚Äì29k
	}
	if volume >= 30000 {
		fires = int(math.Min(3+math.Floor((volume-30000)/10000), 10)) // +1 per 10k, max 10
	}
	return strings.Repeat("üî•", fires)
}

// getCircleEmojis returns circle emojis based on price change percentage
func getCircleEmojis(priceChangePct float64) string {
	absPct := math.Abs(priceChangePct)
	circles := int(math.Min(math.Ceil(absPct/10), 10)) // 1 circle per 10%, max 10
	return strings.Repeat("üîµ", circles)
}

// calculateVolumeUSD —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
func calculateVolumeUSD(ticker api.Ticker, currentPrice float64, intervalSeconds int) float64 {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º QuoteVolume24h (—É–∂–µ –≤ USD/USDT) - —Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
	quoteVolume24h, err := strconv.ParseFloat(ticker.QuoteVol24h, 64)
	if err == nil && quoteVolume24h > 0 {
		// –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
		intervalMinutes := float64(intervalSeconds) / 60.0
		minutesIn24h := 1440.0

		// –ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–º –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
		baseVolume := (quoteVolume24h / minutesIn24h) * intervalMinutes

		// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
		changePct24h, changePctErr := strconv.ParseFloat(ticker.ChangePct, 64)

		// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
		volatilityMultiplier := 1.0
		if changePctErr == nil {
			absChangePct := math.Abs(changePct24h)
			if absChangePct >= 20 {
				volatilityMultiplier = 4.0
			} else if absChangePct >= 15 {
				volatilityMultiplier = 3.0
			} else if absChangePct >= 10 {
				volatilityMultiplier = 2.0
			} else if absChangePct >= 5 {
				volatilityMultiplier = 1.5
			}
		}

		return baseVolume * volatilityMultiplier
	}

	// Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º Volume24h * currentPrice
	volume24h, err := strconv.ParseFloat(ticker.Volume24h, 64)
	if err == nil && volume24h > 0 && currentPrice > 0 {
		intervalMinutes := float64(intervalSeconds) / 60.0
		minutesIn24h := 1440.0

		baseVolume := ((volume24h * currentPrice) / minutesIn24h) * intervalMinutes

		// –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
		changePct24h, changePctErr := strconv.ParseFloat(ticker.ChangePct, 64)
		volatilityMultiplier := 1.0
		if changePctErr == nil {
			absChangePct := math.Abs(changePct24h)
			if absChangePct >= 20 {
				volatilityMultiplier = 4.0
			} else if absChangePct >= 15 {
				volatilityMultiplier = 3.0
			} else if absChangePct >= 10 {
				volatilityMultiplier = 2.0
			} else if absChangePct >= 5 {
				volatilityMultiplier = 1.5
			}
		}

		return baseVolume * volatilityMultiplier
	}

	return 0
}

// addPricePoint –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É —Ü–µ–Ω—ã –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ
func (ph *PriceHistory) addPricePoint(price float64, timestamp time.Time, keepDuration time.Duration) {
	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
	ph.Points = append(ph.Points, PricePoint{
		Price:     price,
		Timestamp: timestamp,
	})

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ keepDuration + –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä)
	cutoffTime := timestamp.Add(-keepDuration - 10*time.Second)
	var newPoints []PricePoint
	for _, point := range ph.Points {
		if point.Timestamp.After(cutoffTime) {
			newPoints = append(newPoints, point)
		}
	}
	ph.Points = newPoints
}

// findPriceExtremes –Ω–∞—Ö–æ–¥–∏—Ç –º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
func (ph *PriceHistory) findPriceExtremes(fromTime, toTime time.Time) (minPrice, maxPrice float64, found bool) {
	var prices []float64

	for _, point := range ph.Points {
		if point.Timestamp.After(fromTime) && point.Timestamp.Before(toTime) {
			prices = append(prices, point.Price)
		}
	}

	if len(prices) == 0 {
		return 0, 0, false
	}

	minPrice = prices[0]
	maxPrice = prices[0]

	for _, price := range prices {
		if price < minPrice {
			minPrice = price
		}
		if price > maxPrice {
			maxPrice = price
		}
	}

	return minPrice, maxPrice, true
}

func Run(client *api.MEXCClient, cfg *config.Config, bl *blacklist.Blacklist, bot *telegram.Bot) {
	// –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
	priceHistories := make(map[string]*PriceHistory)

	for {
		startTime := time.Now()
		log.Printf("üîÑ Starting ticker fetch cycle at %s", startTime.Format("15:04:05"))

		tickers, err := client.GetTickers()
		if err != nil {
			log.Printf("‚ùå Error fetching tickers: %v", err)
			time.Sleep(5 * time.Second)
			continue
		}
		log.Printf("üìä Fetched %d tickers", len(tickers))

		processedCount := 0
		alertCount := 0
		intervalDuration := time.Duration(cfg.IntervalSeconds) * time.Second

		for _, ticker := range tickers {
			if bl.IsBlacklisted(ticker.Symbol) {
				continue
			}

			currentPrice, err := strconv.ParseFloat(ticker.Price, 64)
			if err != nil || currentPrice <= 0 {
				continue
			}

			processedCount++
			currentTime := time.Now()

			// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
			history, exists := priceHistories[ticker.Symbol]
			if !exists {
				history = &PriceHistory{Symbol: ticker.Symbol}
				priceHistories[ticker.Symbol] = history
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
			history.addPricePoint(currentPrice, currentTime, intervalDuration)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
			if len(history.Points) < 2 {
				continue
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
			// –ò—â–µ–º —Ü–µ–Ω—ã –æ—Ç (intervalSeconds - 3) –¥–æ (intervalSeconds + 3) —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
			compareFromTime := currentTime.Add(-intervalDuration - 3*time.Second)
			compareToTime := currentTime.Add(-intervalDuration + 3*time.Second)

			// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
			minPrice, maxPrice, found := history.findPriceExtremes(compareFromTime, compareToTime)
			if !found {
				continue
			}

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞–º–ø–∞ (–æ—Ç –º–∏–Ω–∏–º—É–º–∞) –∏ –¥–∞–º–ø–∞ (–æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
			pumpChangePct := ((currentPrice - minPrice) / minPrice) * 100 // –†–æ—Å—Ç –æ—Ç –º–∏–Ω–∏–º—É–º–∞
			dumpChangePct := ((currentPrice - maxPrice) / maxPrice) * 100 // –ü–∞–¥–µ–Ω–∏–µ –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ
			var significantChangePct float64
			var changeType string
			var referencePrice float64

			if math.Abs(pumpChangePct) > math.Abs(dumpChangePct) {
				significantChangePct = pumpChangePct
				changeType = "PUMP"
				referencePrice = minPrice
			} else {
				significantChangePct = dumpChangePct
				changeType = "DUMP"
				referencePrice = maxPrice
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			if math.Abs(significantChangePct) >= cfg.PriceChangePct {
				log.Printf("üéØ POTENTIAL %s: %s %.8f->%.8f (%.2f%%)",
					changeType, ticker.Symbol, referencePrice, currentPrice, significantChangePct)
				// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º
				volumeUSD := calculateVolumeUSD(ticker, currentPrice, cfg.IntervalSeconds)

				log.Printf("üìä Volume check: %s $%.2f (required: $%.2f)",
					ticker.Symbol, volumeUSD, cfg.VolumeUSD)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
				if volumeUSD >= cfg.VolumeUSD {
					directionEmoji := "üü¢"
					if significantChangePct < 0 {
						directionEmoji = "üî¥"
					}

					circleEmojis := getCircleEmojis(significantChangePct)
					eyeEmoji := getEyeEmoji(volumeUSD)
					fireEmojis := getFireEmojis(volumeUSD)

					msg := fmt.Sprintf(
						"%s %s\n%.2f%% %s\n$%.0f %s%s",
						strings.ToUpper(ticker.Symbol), directionEmoji,
						math.Abs(significantChangePct), circleEmojis,
						volumeUSD, eyeEmoji, fireEmojis,
					)

					log.Printf("üö® ALERT SENT: %s", msg)
					bot.SendMessage(msg)
					bl.Add(ticker.Symbol, 10*time.Minute)
					alertCount++
				} else {
					log.Printf("üí∞ Volume too low: %s $%.2f < $%.2f",
						ticker.Symbol, volumeUSD, cfg.VolumeUSD)
				}
			}
		}

		// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π (–¥–ª—è –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ)
		cleanedCount := 0
		cleanupThreshold := time.Now().Add(-2 * intervalDuration)
		for symbol, history := range priceHistories {
			if len(history.Points) == 0 || history.Points[len(history.Points)-1].Timestamp.Before(cleanupThreshold) {
				delete(priceHistories, symbol)
				cleanedCount++
			}
		}

		elapsed := time.Since(startTime)

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∞–ª–µ—Ä—Ç—ã –∏–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ
		if alertCount > 0 {
			log.Printf("üö® CYCLE SUMMARY: %d ALERTS sent from %d processed tickers in %v",
				alertCount, processedCount, elapsed)
		} else if processedCount > 0 && processedCount%100 == 0 {
			// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–∞–∂–¥—ã–µ ~100 —Ç–∏–∫–µ—Ä–æ–≤)
			log.Printf("‚úÖ System active: processed %d tickers, no alerts in %v",
				processedCount, elapsed)
		}

		// –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ API_REQUEST_INTERVAL)
		requestInterval := time.Duration(API_REQUEST_INTERVAL) * time.Second
		if elapsed < requestInterval {
			sleepDuration := requestInterval - elapsed
			// –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π sleep, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			time.Sleep(sleepDuration)
		} else {
			log.Printf("‚ö†Ô∏è Warning: Cycle took longer than request interval (%v > %v)", elapsed, requestInterval)
		}
	}
}
