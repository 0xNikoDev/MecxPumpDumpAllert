package monitor

import (
	"MexcPumpDumpAlert/internal/api"
	"MexcPumpDumpAlert/internal/blacklist"
	"MexcPumpDumpAlert/internal/config"
	"MexcPumpDumpAlert/internal/telegram"
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
	"time"
)

// PricePoint —Ö—Ä–∞–Ω–∏—Ç —Ü–µ–Ω—É –∏ –≤—Ä–µ–º—è
type PricePoint struct {
	Price     float64
	Timestamp time.Time
}

// PriceHistory —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
type PriceHistory struct {
	Symbol string
	Points []PricePoint
	mu     sync.RWMutex
}

// calculateRequestInterval –≤—ã—á–∏—Å–ª—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
func calculateRequestInterval(compareIntervalSeconds int) time.Duration {
	// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è 5-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∂–¥—ã–µ 500–º—Å
	if compareIntervalSeconds <= 10 {
		return 500 * time.Millisecond // 2 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–æ 10 —Å–µ–∫—É–Ω–¥
	} else if compareIntervalSeconds <= 30 {
		return 1 * time.Second // –ó–∞–ø—Ä–æ—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ 10-30 —Å–µ–∫—É–Ω–¥
	} else if compareIntervalSeconds <= 60 {
		return 1500 * time.Millisecond // –ó–∞–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ 30-60 —Å–µ–∫—É–Ω–¥
	}
	return 2 * time.Second // –ó–∞–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
}

// getEyeEmoji returns an eye emoji based on volume
func getEyeEmoji(volume float64) string {
	if volume >= 1000 && volume < 5000 {
		return "üëÅÔ∏è"
	}
	return ""
}

// getFireEmojis returns fire emojis based on volume
func getFireEmojis(volume float64) string {
	if volume < 5000 {
		return ""
	}
	fires := 1 // 5k‚Äì9k
	if volume >= 10000 {
		fires = 2 // 10k‚Äì19k
	}
	if volume >= 20000 {
		fires = 3 // 20k‚Äì29k
	}
	if volume >= 30000 {
		fires = int(math.Min(3+math.Floor((volume-30000)/10000), 10)) // +1 per 10k, max 10
	}
	return strings.Repeat("üî•", fires)
}

// getCircleEmojis returns circle emojis based on price change percentage
func getCircleEmojis(priceChangePct float64) string {
	absPct := math.Abs(priceChangePct)
	circles := int(math.Min(math.Ceil(absPct/10), 10)) // 1 circle per 10%, max 10
	return strings.Repeat("üîµ", circles)
}

// calculateVolumeFromTrades —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–æ–Ω –∏–ª–∏ –æ–±—â–∏–π –æ–±—ä–µ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
func calculateVolumeFromTrades(client *api.MEXCClient, symbol string, intervalSeconds int) (float64, error) {
	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ trades (–º–∞–∫—Å–∏–º—É–º 1000)
	trades, err := client.GetTrades(symbol, 1000)
	if err != nil {
		return 0, fmt.Errorf("failed to get trades: %v", err)
	}

	if len(trades) == 0 {
		return 0, fmt.Errorf("no trades data")
	}

	currentTimeMs := time.Now().UnixNano() / int64(time.Millisecond)

	// –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É - –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–≤–∞–ª + –±—É—Ñ–µ—Ä
	if intervalSeconds > 120 {
		return calculateTotalVolumeForLargeInterval(trades, currentTimeMs, intervalSeconds)
	}

	// –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ <= 2 –º–∏–Ω—É—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
	return calculateMaxVolumeFromSlidingWindows(trades, currentTimeMs, intervalSeconds)
}

// calculateTotalVolumeForLargeInterval —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –æ–±—ä–µ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
func calculateTotalVolumeForLargeInterval(trades []api.Trade, currentTimeMs int64, intervalSeconds int) (float64, error) {
	// –£–º–µ–Ω—å—à–∞–µ–º –±—É—Ñ–µ—Ä –¥–æ 3 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	bufferMs := int64(3 * 1000)
	intervalMs := int64(intervalSeconds) * 1000
	startTimeMs := currentTimeMs - intervalMs - bufferMs

	var totalVolumeUSD float64

	for _, trade := range trades {
		if trade.Time >= startTimeMs && trade.Time <= currentTimeMs {
			quoteQty, err := strconv.ParseFloat(trade.QuoteQty, 64)
			if err == nil && quoteQty > 0 {
				totalVolumeUSD += quoteQty
			}
		}
	}

	return totalVolumeUSD, nil
}

// calculateMaxVolumeFromSlidingWindows –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å—Ä–µ–¥–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–æ–Ω –∑–∞ 2 –º–∏–Ω—É—Ç—ã
func calculateMaxVolumeFromSlidingWindows(trades []api.Trade, currentTimeMs int64, intervalSeconds int) (float64, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
	twoMinutesMs := int64(120 * 1000)
	startTimeMs := currentTimeMs - twoMinutesMs

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –ø–æ —Å–µ–∫—É–Ω–¥–∞–º
	secondVolumes := make(map[int64]float64)

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–π–¥—ã –ø–æ —Å–µ–∫—É–Ω–¥–∞–º
	for _, trade := range trades {
		if trade.Time >= startTimeMs && trade.Time <= currentTimeMs {
			quoteQty, err := strconv.ParseFloat(trade.QuoteQty, 64)
			if err == nil && quoteQty > 0 {
				// –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–µ–∫—É–Ω–¥
				secondTimestamp := trade.Time / 1000
				secondVolumes[secondTimestamp] += quoteQty
			}
		}
	}

	// –°–æ–∑–¥–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
	intervalSizeSeconds := int64(intervalSeconds)
	maxVolume := float64(0)

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –º–∏–Ω—É—Ç
	for i := int64(0); i <= 120-intervalSizeSeconds; i++ {
		windowStartSecond := (currentTimeMs / 1000) - 120 + i
		windowEndSecond := windowStartSecond + intervalSizeSeconds

		windowVolume := float64(0)

		// –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
		for second := windowStartSecond; second < windowEndSecond; second++ {
			if volume, exists := secondVolumes[second]; exists {
				windowVolume += volume
			}
		}

		if windowVolume > maxVolume {
			maxVolume = windowVolume
		}
	}

	return maxVolume, nil
}

// calculateVolumeUSD —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
func calculateVolumeUSD(client *api.MEXCClient, ticker api.Ticker, currentPrice float64, intervalSeconds int) float64 {
	// –î–ª—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (5 —Å–µ–∫—É–Ω–¥) –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ 1 –ø–æ–ø—ã—Ç–∫—É —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å
	maxAttempts := 1
	if intervalSeconds > 30 {
		maxAttempts = 2
	}

	for attempt := 1; attempt <= maxAttempts; attempt++ {
		volume, err := calculateVolumeFromTrades(client, ticker.Symbol, intervalSeconds)
		if err == nil {
			return volume
		}

		if attempt < maxAttempts {
			time.Sleep(30 * time.Millisecond) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
		}
	}

	return 0
}

// addPricePoint –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É —Ü–µ–Ω—ã –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ (thread-safe)
func (ph *PriceHistory) addPricePoint(price float64, timestamp time.Time, keepDuration time.Duration) {
	ph.mu.Lock()
	defer ph.mu.Unlock()

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
	ph.Points = append(ph.Points, PricePoint{
		Price:     price,
		Timestamp: timestamp,
	})

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ keepDuration + –±—É—Ñ–µ—Ä)
	cutoffTime := timestamp.Add(-keepDuration - 10*time.Second)
	var newPoints []PricePoint
	for _, point := range ph.Points {
		if point.Timestamp.After(cutoffTime) {
			newPoints = append(newPoints, point)
		}
	}
	ph.Points = newPoints
}

// findPriceExtremes –Ω–∞—Ö–æ–¥–∏—Ç –º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (thread-safe)
func (ph *PriceHistory) findPriceExtremes(fromTime, toTime time.Time) (minPrice, maxPrice float64, found bool) {
	ph.mu.RLock()
	defer ph.mu.RUnlock()

	var prices []float64

	for _, point := range ph.Points {
		if point.Timestamp.After(fromTime) && point.Timestamp.Before(toTime) {
			prices = append(prices, point.Price)
		}
	}

	if len(prices) == 0 {
		return 0, 0, false
	}

	minPrice = prices[0]
	maxPrice = prices[0]

	for _, price := range prices {
		if price < minPrice {
			minPrice = price
		}
		if price > maxPrice {
			maxPrice = price
		}
	}

	return minPrice, maxPrice, true
}

// getPointsCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ (thread-safe)
func (ph *PriceHistory) getPointsCount() int {
	ph.mu.RLock()
	defer ph.mu.RUnlock()
	return len(ph.Points)
}

// processTicker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä
func processTicker(
	ticker api.Ticker,
	cfg *config.Config,
	bl *blacklist.Blacklist,
	bot *telegram.Bot,
	client *api.MEXCClient,
	priceHistories map[string]*PriceHistory,
	historyMutex *sync.RWMutex,
	processedCount *int32,
	alertCount *int32,
	intervalDuration time.Duration,
) {
	currentPrice, err := strconv.ParseFloat(ticker.Price, 64)
	if err != nil || currentPrice <= 0 {
		return
	}

	atomic.AddInt32(processedCount, 1)
	currentTime := time.Now()

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
	historyMutex.RLock()
	history, exists := priceHistories[ticker.Symbol]
	historyMutex.RUnlock()

	if !exists {
		history = &PriceHistory{Symbol: ticker.Symbol}
		historyMutex.Lock()
		priceHistories[ticker.Symbol] = history
		historyMutex.Unlock()
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
	history.addPricePoint(currentPrice, currentTime, intervalDuration)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	if history.getPointsCount() < 2 {
		return
	}

	// –î–ª—è 5-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä
	bufferSeconds := 1
	if cfg.IntervalSeconds > 10 {
		bufferSeconds = int(math.Max(2, float64(cfg.IntervalSeconds)*0.1))
	}

	compareFromTime := currentTime.Add(-intervalDuration - time.Duration(bufferSeconds)*time.Second)
	compareToTime := currentTime.Add(-intervalDuration + time.Duration(bufferSeconds)*time.Second)

	// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
	minPrice, maxPrice, found := history.findPriceExtremes(compareFromTime, compareToTime)
	if !found {
		return
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞–º–ø–∞ –∏ –¥–∞–º–ø–∞
	pumpChangePct := ((currentPrice - minPrice) / minPrice) * 100
	dumpChangePct := ((currentPrice - maxPrice) / maxPrice) * 100

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ
	var significantChangePct float64
	var referencePrice float64

	if math.Abs(pumpChangePct) > math.Abs(dumpChangePct) {
		significantChangePct = pumpChangePct
		referencePrice = minPrice
	} else {
		significantChangePct = dumpChangePct
		referencePrice = maxPrice
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	if math.Abs(significantChangePct) >= cfg.PriceChangePct {
		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º –∏–∑ trades
		volumeUSD := calculateVolumeUSD(client, ticker, currentPrice, cfg.IntervalSeconds)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
		if volumeUSD >= cfg.VolumeUSD {
			directionEmoji := "üü¢"
			if significantChangePct < 0 {
				directionEmoji = "üî¥"
			}

			circleEmojis := getCircleEmojis(significantChangePct)
			eyeEmoji := getEyeEmoji(volumeUSD)
			fireEmojis := getFireEmojis(volumeUSD)

			msg := fmt.Sprintf(
				"%s %s\n%.2f%% %s\n$%.0f %s%s",
				strings.ToUpper(ticker.Symbol), directionEmoji,
				math.Abs(significantChangePct), circleEmojis,
				volumeUSD, eyeEmoji, fireEmojis,
			)

			log.Printf("üö® ALERT: %s (%.8f->%.8f)", ticker.Symbol, referencePrice, currentPrice)
			bot.SendMessage(msg)
			bl.Add(ticker.Symbol, 10*time.Minute)
			atomic.AddInt32(alertCount, 1)
		}
	}
}

func Run(client *api.MEXCClient, cfg *config.Config, bl *blacklist.Blacklist, bot *telegram.Bot) {
	// –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
	priceHistories := make(map[string]*PriceHistory)
	historyMutex := &sync.RWMutex{}

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
	// –î–ª—è 5-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 15 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	semaphore := make(chan struct{}, 15)

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	var lastLogTime time.Time
	var totalCycles int64

	log.Printf("üöÄ Monitor started (interval: %ds, threshold: %.2f%%, volume: $%.0f)",
		cfg.IntervalSeconds, cfg.PriceChangePct, cfg.VolumeUSD)

	for {
		startTime := time.Now()
		atomic.AddInt64(&totalCycles, 1)

		// –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
		requestInterval := calculateRequestInterval(cfg.IntervalSeconds)

		tickers, err := client.GetTickers()
		if err != nil {
			log.Printf("‚ùå Error fetching tickers: %v", err)
			time.Sleep(1 * time.Second)
			continue
		}

		var processedCount int32
		var alertCount int32
		intervalDuration := time.Duration(cfg.IntervalSeconds) * time.Second

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º WaitGroup –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		var wg sync.WaitGroup

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
		for _, ticker := range tickers {
			if bl.IsBlacklisted(ticker.Symbol) {
				continue
			}

			wg.Add(1)
			go func(t api.Ticker) {
				defer wg.Done()

				// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
				select {
				case semaphore <- struct{}{}:
					defer func() { <-semaphore }()
					processTicker(
						t, cfg, bl, bot, client,
						priceHistories, historyMutex,
						&processedCount, &alertCount,
						intervalDuration,
					)
				case <-time.After(50 * time.Millisecond):
					// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–µ–º–∞—Ñ–æ—Ä –∑–∞–Ω—è—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
					return
				}
			}(ticker)
		}

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
		done := make(chan bool)
		go func() {
			wg.Wait()
			done <- true
		}()

		select {
		case <-done:
			// –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
		case <-time.After(requestInterval - 100*time.Millisecond):
			// –¢–∞–π–º–∞—É—Ç - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É
		}

		// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π (–¥–µ–ª–∞–µ–º —Ä–µ–∂–µ - –∫–∞–∂–¥—ã–µ 20 —Ü–∏–∫–ª–æ–≤)
		if atomic.LoadInt64(&totalCycles)%20 == 0 {
			historyMutex.Lock()
			cleanupThreshold := time.Now().Add(-2 * intervalDuration)
			for symbol, history := range priceHistories {
				if history.getPointsCount() == 0 {
					delete(priceHistories, symbol)
					continue
				}
				history.mu.RLock()
				lastPoint := len(history.Points) > 0 && history.Points[len(history.Points)-1].Timestamp.Before(cleanupThreshold)
				history.mu.RUnlock()
				if lastPoint {
					delete(priceHistories, symbol)
				}
			}
			historyMutex.Unlock()
		}

		elapsed := time.Since(startTime)
		currentAlertCount := atomic.LoadInt32(&alertCount)
		currentProcessedCount := atomic.LoadInt32(&processedCount)

		// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		if currentAlertCount > 0 {
			log.Printf("üö® Cycle #%d: %d alerts, %d tickers, %.2fs",
				totalCycles, currentAlertCount, currentProcessedCount, elapsed.Seconds())
			lastLogTime = time.Now()
		} else if time.Since(lastLogTime) > 30*time.Second {
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
			log.Printf("‚úÖ Cycle #%d: %d tickers, %.2fs",
				totalCycles, currentProcessedCount, elapsed.Seconds())
			lastLogTime = time.Now()
		}

		// –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
		if elapsed < requestInterval {
			time.Sleep(requestInterval - elapsed)
		}
	}
}
